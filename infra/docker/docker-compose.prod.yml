version: '3.9'

# Production-like docker-compose (without dev volumes)

services:
  postgres:
    image: postgres:16-alpine
    container_name: neptune-postgres-prod
    environment:
      POSTGRES_DB: neptune
      POSTGRES_USER: neptune
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neptune"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: neptune-redis-prod
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.api
    container_name: neptune-api-prod
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: 3000
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ingestion:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.ingestion
    container_name: neptune-ingestion-prod
    environment:
      NODE_ENV: production
      REDIS_URL: ${REDIS_URL}
      ODDS_API_KEY: ${ODDS_API_KEY}
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
